/* tslint:disable */
/* eslint-disable */
/**
 * Hospital Management API
 * API for managing hospital ambulances, procedures, and payments.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xkokavecs@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Ambulance,
  GetAmbulanceSummary200Response,
  Procedure,
} from '../models/index';
import {
    AmbulanceFromJSON,
    AmbulanceToJSON,
    GetAmbulanceSummary200ResponseFromJSON,
    GetAmbulanceSummary200ResponseToJSON,
    ProcedureFromJSON,
    ProcedureToJSON,
} from '../models/index';

export interface AmbulancesIdDeleteRequest {
    id: string;
}

export interface AmbulancesIdGetRequest {
    id: string;
}

export interface AmbulancesIdPutRequest {
    id: string;
    ambulance: Ambulance;
}

export interface AmbulancesPostRequest {
    ambulance: Ambulance;
}

export interface GetAmbulanceSummaryRequest {
    ambulanceId: string;
}

export interface GetProceduresByAmbulanceRequest {
    ambulanceId: string;
}

/**
 * AmbulanceManagementApi - interface
 * 
 * @export
 * @interface AmbulanceManagementApiInterface
 */
export interface AmbulanceManagementApiInterface {
    /**
     * 
     * @summary List all ambulances
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceManagementApiInterface
     */
    ambulancesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Ambulance>>>;

    /**
     * List all ambulances
     */
    ambulancesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Ambulance>>;

    /**
     * 
     * @summary Delete an ambulance
     * @param {string} id Ambulance identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceManagementApiInterface
     */
    ambulancesIdDeleteRaw(requestParameters: AmbulancesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an ambulance
     */
    ambulancesIdDelete(requestParameters: AmbulancesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get a single ambulance by ID
     * @param {string} id Ambulance identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceManagementApiInterface
     */
    ambulancesIdGetRaw(requestParameters: AmbulancesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ambulance>>;

    /**
     * Get a single ambulance by ID
     */
    ambulancesIdGet(requestParameters: AmbulancesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ambulance>;

    /**
     * 
     * @summary Update an existing ambulance
     * @param {string} id Ambulance identifier
     * @param {Ambulance} ambulance 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceManagementApiInterface
     */
    ambulancesIdPutRaw(requestParameters: AmbulancesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ambulance>>;

    /**
     * Update an existing ambulance
     */
    ambulancesIdPut(requestParameters: AmbulancesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ambulance>;

    /**
     * 
     * @summary Create a new ambulance
     * @param {Ambulance} ambulance 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceManagementApiInterface
     */
    ambulancesPostRaw(requestParameters: AmbulancesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ambulance>>;

    /**
     * Create a new ambulance
     */
    ambulancesPost(requestParameters: AmbulancesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ambulance>;

    /**
     * Retrieve the total sum of procedure costs for a specific ambulance.
     * @summary Get summary of procedure costs for an ambulance
     * @param {string} ambulanceId Unique identifier of the ambulance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceManagementApiInterface
     */
    getAmbulanceSummaryRaw(requestParameters: GetAmbulanceSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAmbulanceSummary200Response>>;

    /**
     * Retrieve the total sum of procedure costs for a specific ambulance.
     * Get summary of procedure costs for an ambulance
     */
    getAmbulanceSummary(requestParameters: GetAmbulanceSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAmbulanceSummary200Response>;

    /**
     * Retrieve all procedures linked to a specific ambulance.
     * @summary Get procedures for an ambulance
     * @param {string} ambulanceId Unique identifier of the ambulance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceManagementApiInterface
     */
    getProceduresByAmbulanceRaw(requestParameters: GetProceduresByAmbulanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Procedure>>>;

    /**
     * Retrieve all procedures linked to a specific ambulance.
     * Get procedures for an ambulance
     */
    getProceduresByAmbulance(requestParameters: GetProceduresByAmbulanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Procedure>>;

}

/**
 * 
 */
export class AmbulanceManagementApi extends runtime.BaseAPI implements AmbulanceManagementApiInterface {

    /**
     * List all ambulances
     */
    async ambulancesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Ambulance>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ambulances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AmbulanceFromJSON));
    }

    /**
     * List all ambulances
     */
    async ambulancesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Ambulance>> {
        const response = await this.ambulancesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete an ambulance
     */
    async ambulancesIdDeleteRaw(requestParameters: AmbulancesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ambulancesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ambulances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an ambulance
     */
    async ambulancesIdDelete(requestParameters: AmbulancesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ambulancesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a single ambulance by ID
     */
    async ambulancesIdGetRaw(requestParameters: AmbulancesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ambulance>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ambulancesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ambulances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AmbulanceFromJSON(jsonValue));
    }

    /**
     * Get a single ambulance by ID
     */
    async ambulancesIdGet(requestParameters: AmbulancesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ambulance> {
        const response = await this.ambulancesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing ambulance
     */
    async ambulancesIdPutRaw(requestParameters: AmbulancesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ambulance>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ambulancesIdPut().'
            );
        }

        if (requestParameters['ambulance'] == null) {
            throw new runtime.RequiredError(
                'ambulance',
                'Required parameter "ambulance" was null or undefined when calling ambulancesIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ambulances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AmbulanceToJSON(requestParameters['ambulance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AmbulanceFromJSON(jsonValue));
    }

    /**
     * Update an existing ambulance
     */
    async ambulancesIdPut(requestParameters: AmbulancesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ambulance> {
        const response = await this.ambulancesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new ambulance
     */
    async ambulancesPostRaw(requestParameters: AmbulancesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ambulance>> {
        if (requestParameters['ambulance'] == null) {
            throw new runtime.RequiredError(
                'ambulance',
                'Required parameter "ambulance" was null or undefined when calling ambulancesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ambulances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AmbulanceToJSON(requestParameters['ambulance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AmbulanceFromJSON(jsonValue));
    }

    /**
     * Create a new ambulance
     */
    async ambulancesPost(requestParameters: AmbulancesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ambulance> {
        const response = await this.ambulancesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the total sum of procedure costs for a specific ambulance.
     * Get summary of procedure costs for an ambulance
     */
    async getAmbulanceSummaryRaw(requestParameters: GetAmbulanceSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAmbulanceSummary200Response>> {
        if (requestParameters['ambulanceId'] == null) {
            throw new runtime.RequiredError(
                'ambulanceId',
                'Required parameter "ambulanceId" was null or undefined when calling getAmbulanceSummary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ambulances/{ambulanceId}/summary`.replace(`{${"ambulanceId"}}`, encodeURIComponent(String(requestParameters['ambulanceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAmbulanceSummary200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the total sum of procedure costs for a specific ambulance.
     * Get summary of procedure costs for an ambulance
     */
    async getAmbulanceSummary(requestParameters: GetAmbulanceSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAmbulanceSummary200Response> {
        const response = await this.getAmbulanceSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all procedures linked to a specific ambulance.
     * Get procedures for an ambulance
     */
    async getProceduresByAmbulanceRaw(requestParameters: GetProceduresByAmbulanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Procedure>>> {
        if (requestParameters['ambulanceId'] == null) {
            throw new runtime.RequiredError(
                'ambulanceId',
                'Required parameter "ambulanceId" was null or undefined when calling getProceduresByAmbulance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ambulances/{ambulanceId}/procedures`.replace(`{${"ambulanceId"}}`, encodeURIComponent(String(requestParameters['ambulanceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProcedureFromJSON));
    }

    /**
     * Retrieve all procedures linked to a specific ambulance.
     * Get procedures for an ambulance
     */
    async getProceduresByAmbulance(requestParameters: GetProceduresByAmbulanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Procedure>> {
        const response = await this.getProceduresByAmbulanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
