/* tslint:disable */
/* eslint-disable */
/**
 * Hospital Management API
 * API for managing hospital ambulances, procedures, and payments.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xkokavecs@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Payment,
} from '../models/index';
import {
    PaymentFromJSON,
    PaymentToJSON,
} from '../models/index';

export interface PaymentsIdDeleteRequest {
    id: string;
}

export interface PaymentsIdGetRequest {
    id: string;
}

export interface PaymentsIdPutRequest {
    id: string;
    payment: Payment;
}

export interface PaymentsPostRequest {
    payment: Payment;
}

/**
 * PaymentManagementApi - interface
 * 
 * @export
 * @interface PaymentManagementApiInterface
 */
export interface PaymentManagementApiInterface {
    /**
     * 
     * @summary List all payments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentManagementApiInterface
     */
    paymentsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Payment>>>;

    /**
     * List all payments
     */
    paymentsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Payment>>;

    /**
     * 
     * @summary Delete a payment
     * @param {string} id Payment identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentManagementApiInterface
     */
    paymentsIdDeleteRaw(requestParameters: PaymentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a payment
     */
    paymentsIdDelete(requestParameters: PaymentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get a single payment by ID
     * @param {string} id Payment identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentManagementApiInterface
     */
    paymentsIdGetRaw(requestParameters: PaymentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payment>>;

    /**
     * Get a single payment by ID
     */
    paymentsIdGet(requestParameters: PaymentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payment>;

    /**
     * 
     * @summary Update an existing payment
     * @param {string} id Payment identifier
     * @param {Payment} payment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentManagementApiInterface
     */
    paymentsIdPutRaw(requestParameters: PaymentsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payment>>;

    /**
     * Update an existing payment
     */
    paymentsIdPut(requestParameters: PaymentsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payment>;

    /**
     * 
     * @summary Create a new payment
     * @param {Payment} payment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentManagementApiInterface
     */
    paymentsPostRaw(requestParameters: PaymentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payment>>;

    /**
     * Create a new payment
     */
    paymentsPost(requestParameters: PaymentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payment>;

}

/**
 * 
 */
export class PaymentManagementApi extends runtime.BaseAPI implements PaymentManagementApiInterface {

    /**
     * List all payments
     */
    async paymentsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Payment>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PaymentFromJSON));
    }

    /**
     * List all payments
     */
    async paymentsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Payment>> {
        const response = await this.paymentsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete a payment
     */
    async paymentsIdDeleteRaw(requestParameters: PaymentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling paymentsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a payment
     */
    async paymentsIdDelete(requestParameters: PaymentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.paymentsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a single payment by ID
     */
    async paymentsIdGetRaw(requestParameters: PaymentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling paymentsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentFromJSON(jsonValue));
    }

    /**
     * Get a single payment by ID
     */
    async paymentsIdGet(requestParameters: PaymentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payment> {
        const response = await this.paymentsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing payment
     */
    async paymentsIdPutRaw(requestParameters: PaymentsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling paymentsIdPut().'
            );
        }

        if (requestParameters['payment'] == null) {
            throw new runtime.RequiredError(
                'payment',
                'Required parameter "payment" was null or undefined when calling paymentsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/payments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentToJSON(requestParameters['payment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentFromJSON(jsonValue));
    }

    /**
     * Update an existing payment
     */
    async paymentsIdPut(requestParameters: PaymentsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payment> {
        const response = await this.paymentsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new payment
     */
    async paymentsPostRaw(requestParameters: PaymentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payment>> {
        if (requestParameters['payment'] == null) {
            throw new runtime.RequiredError(
                'payment',
                'Required parameter "payment" was null or undefined when calling paymentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/payments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentToJSON(requestParameters['payment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentFromJSON(jsonValue));
    }

    /**
     * Create a new payment
     */
    async paymentsPost(requestParameters: PaymentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payment> {
        const response = await this.paymentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
