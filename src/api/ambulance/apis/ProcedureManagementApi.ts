/* tslint:disable */
/* eslint-disable */
/**
 * Hospital Management API
 * API for managing hospital ambulances, procedures, and payments.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xkokavecs@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Procedure,
} from '../models/index';
import {
    ProcedureFromJSON,
    ProcedureToJSON,
} from '../models/index';

export interface ProceduresIdDeleteRequest {
    id: string;
}

export interface ProceduresIdGetRequest {
    id: string;
}

export interface ProceduresIdPutRequest {
    id: string;
    procedure: Procedure;
}

export interface ProceduresPostRequest {
    procedure: Procedure;
}

/**
 * ProcedureManagementApi - interface
 * 
 * @export
 * @interface ProcedureManagementApiInterface
 */
export interface ProcedureManagementApiInterface {
    /**
     * 
     * @summary List all procedures
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcedureManagementApiInterface
     */
    proceduresGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Procedure>>>;

    /**
     * List all procedures
     */
    proceduresGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Procedure>>;

    /**
     * 
     * @summary Delete a procedure
     * @param {string} id Procedure identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcedureManagementApiInterface
     */
    proceduresIdDeleteRaw(requestParameters: ProceduresIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a procedure
     */
    proceduresIdDelete(requestParameters: ProceduresIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get a single procedure by ID
     * @param {string} id Procedure identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcedureManagementApiInterface
     */
    proceduresIdGetRaw(requestParameters: ProceduresIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Procedure>>;

    /**
     * Get a single procedure by ID
     */
    proceduresIdGet(requestParameters: ProceduresIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Procedure>;

    /**
     * 
     * @summary Update an existing procedure
     * @param {string} id Procedure identifier
     * @param {Procedure} procedure 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcedureManagementApiInterface
     */
    proceduresIdPutRaw(requestParameters: ProceduresIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Procedure>>;

    /**
     * Update an existing procedure
     */
    proceduresIdPut(requestParameters: ProceduresIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Procedure>;

    /**
     * 
     * @summary Create a new procedure
     * @param {Procedure} procedure 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcedureManagementApiInterface
     */
    proceduresPostRaw(requestParameters: ProceduresPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Procedure>>;

    /**
     * Create a new procedure
     */
    proceduresPost(requestParameters: ProceduresPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Procedure>;

}

/**
 * 
 */
export class ProcedureManagementApi extends runtime.BaseAPI implements ProcedureManagementApiInterface {

    /**
     * List all procedures
     */
    async proceduresGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Procedure>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/procedures`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProcedureFromJSON));
    }

    /**
     * List all procedures
     */
    async proceduresGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Procedure>> {
        const response = await this.proceduresGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete a procedure
     */
    async proceduresIdDeleteRaw(requestParameters: ProceduresIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling proceduresIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/procedures/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a procedure
     */
    async proceduresIdDelete(requestParameters: ProceduresIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.proceduresIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a single procedure by ID
     */
    async proceduresIdGetRaw(requestParameters: ProceduresIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Procedure>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling proceduresIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/procedures/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcedureFromJSON(jsonValue));
    }

    /**
     * Get a single procedure by ID
     */
    async proceduresIdGet(requestParameters: ProceduresIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Procedure> {
        const response = await this.proceduresIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing procedure
     */
    async proceduresIdPutRaw(requestParameters: ProceduresIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Procedure>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling proceduresIdPut().'
            );
        }

        if (requestParameters['procedure'] == null) {
            throw new runtime.RequiredError(
                'procedure',
                'Required parameter "procedure" was null or undefined when calling proceduresIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/procedures/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProcedureToJSON(requestParameters['procedure']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcedureFromJSON(jsonValue));
    }

    /**
     * Update an existing procedure
     */
    async proceduresIdPut(requestParameters: ProceduresIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Procedure> {
        const response = await this.proceduresIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new procedure
     */
    async proceduresPostRaw(requestParameters: ProceduresPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Procedure>> {
        if (requestParameters['procedure'] == null) {
            throw new runtime.RequiredError(
                'procedure',
                'Required parameter "procedure" was null or undefined when calling proceduresPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/procedures`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcedureToJSON(requestParameters['procedure']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcedureFromJSON(jsonValue));
    }

    /**
     * Create a new procedure
     */
    async proceduresPost(requestParameters: ProceduresPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Procedure> {
        const response = await this.proceduresPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
