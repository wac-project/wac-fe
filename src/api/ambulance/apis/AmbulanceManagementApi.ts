/* tslint:disable */
/* eslint-disable */
/**
 * Hospital Management API
 * API for managing hospital ambulances, procedures, and payments.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xkokavecs@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Ambulance,
  GetAmbulanceSummary200Response,
} from '../models/index';
import {
    AmbulanceFromJSON,
    AmbulanceToJSON,
    GetAmbulanceSummary200ResponseFromJSON,
// @ts-ignore
    GetAmbulanceSummary200ResponseToJSON,
} from '../models/index';

export interface CreateAmbulanceRequest {
    ambulance: Ambulance;
}

export interface DeleteAmbulanceRequest {
    ambulanceId: string;
}

export interface GetAmbulanceByIdRequest {
    ambulanceId: string;
}

export interface GetAmbulanceSummaryRequest {
    ambulanceId: string;
}

export interface UpdateAmbulanceRequest {
    ambulanceId: string;
    ambulance: Ambulance;
}

/**
 * AmbulanceManagementApi - interface
 *
 * @export
 * @interface AmbulanceManagementApiInterface
 */
export interface AmbulanceManagementApiInterface {
    /**
     * Create a new ambulance.
     * @summary Create a new ambulance
     * @param {Ambulance} ambulance Ambulance object that needs to be added to the system.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceManagementApiInterface
     */
    createAmbulanceRaw(requestParameters: CreateAmbulanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ambulance>>;

    /**
     * Create a new ambulance.
     * Create a new ambulance
     */
    createAmbulance(requestParameters: CreateAmbulanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ambulance>;

    /**
     * Delete an ambulance and all procedures linked to it.
     * @summary Delete an ambulance and its associated procedures
     * @param {string} ambulanceId Unique identifier of the ambulance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceManagementApiInterface
     */
    deleteAmbulanceRaw(requestParameters: DeleteAmbulanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an ambulance and all procedures linked to it.
     * Delete an ambulance and its associated procedures
     */
    deleteAmbulance(requestParameters: DeleteAmbulanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieve details of a specific ambulance including a summary of the total procedure costs.
     * @summary Get ambulance details
     * @param {string} ambulanceId Unique identifier of the ambulance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceManagementApiInterface
     */
    getAmbulanceByIdRaw(requestParameters: GetAmbulanceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ambulance>>;

    /**
     * Retrieve details of a specific ambulance including a summary of the total procedure costs.
     * Get ambulance details
     */
    getAmbulanceById(requestParameters: GetAmbulanceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ambulance>;

    /**
     * Retrieve the total sum of procedure costs for a specific ambulance.
     * @summary Get summary of procedure costs for an ambulance
     * @param {string} ambulanceId Unique identifier of the ambulance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceManagementApiInterface
     */
    getAmbulanceSummaryRaw(requestParameters: GetAmbulanceSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAmbulanceSummary200Response>>;

    /**
     * Retrieve the total sum of procedure costs for a specific ambulance.
     * Get summary of procedure costs for an ambulance
     */
    getAmbulanceSummary(requestParameters: GetAmbulanceSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAmbulanceSummary200Response>;

    /**
     * Retrieve a list of all ambulances with details such as name, location, and driver\'s name.
     * @summary Get list of ambulances
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceManagementApiInterface
     */
    getAmbulancesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Ambulance>>>;

    /**
     * Retrieve a list of all ambulances with details such as name, location, and driver\'s name.
     * Get list of ambulances
     */
    getAmbulances(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Ambulance>>;

    /**
     * Update information of an existing ambulance.
     * @summary Update ambulance details
     * @param {string} ambulanceId Unique identifier of the ambulance.
     * @param {Ambulance} ambulance Ambulance object with updated details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceManagementApiInterface
     */
    updateAmbulanceRaw(requestParameters: UpdateAmbulanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ambulance>>;

    /**
     * Update information of an existing ambulance.
     * Update ambulance details
     */
    updateAmbulance(requestParameters: UpdateAmbulanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ambulance>;

}

/**
 *
 */
export class AmbulanceManagementApi extends runtime.BaseAPI implements AmbulanceManagementApiInterface {

    /**
     * Create a new ambulance.
     * Create a new ambulance
     */
    async createAmbulanceRaw(requestParameters: CreateAmbulanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ambulance>> {
        if (requestParameters['ambulance'] == null) {
            throw new runtime.RequiredError(
                'ambulance',
                'Required parameter "ambulance" was null or undefined when calling createAmbulance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ambulances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AmbulanceToJSON(requestParameters['ambulance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AmbulanceFromJSON(jsonValue));
    }

    /**
     * Create a new ambulance.
     * Create a new ambulance
     */
    async createAmbulance(requestParameters: CreateAmbulanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ambulance> {
        const response = await this.createAmbulanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an ambulance and all procedures linked to it.
     * Delete an ambulance and its associated procedures
     */
    async deleteAmbulanceRaw(requestParameters: DeleteAmbulanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ambulanceId'] == null) {
            throw new runtime.RequiredError(
                'ambulanceId',
                'Required parameter "ambulanceId" was null or undefined when calling deleteAmbulance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ambulances/{ambulanceId}`.replace(`{${"ambulanceId"}}`, encodeURIComponent(String(requestParameters['ambulanceId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an ambulance and all procedures linked to it.
     * Delete an ambulance and its associated procedures
     */
    async deleteAmbulance(requestParameters: DeleteAmbulanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAmbulanceRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve details of a specific ambulance including a summary of the total procedure costs.
     * Get ambulance details
     */
    async getAmbulanceByIdRaw(requestParameters: GetAmbulanceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ambulance>> {
        if (requestParameters['ambulanceId'] == null) {
            throw new runtime.RequiredError(
                'ambulanceId',
                'Required parameter "ambulanceId" was null or undefined when calling getAmbulanceById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ambulances/{ambulanceId}`.replace(`{${"ambulanceId"}}`, encodeURIComponent(String(requestParameters['ambulanceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AmbulanceFromJSON(jsonValue));
    }

    /**
     * Retrieve details of a specific ambulance including a summary of the total procedure costs.
     * Get ambulance details
     */
    async getAmbulanceById(requestParameters: GetAmbulanceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ambulance> {
        const response = await this.getAmbulanceByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the total sum of procedure costs for a specific ambulance.
     * Get summary of procedure costs for an ambulance
     */
    async getAmbulanceSummaryRaw(requestParameters: GetAmbulanceSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAmbulanceSummary200Response>> {
        if (requestParameters['ambulanceId'] == null) {
            throw new runtime.RequiredError(
                'ambulanceId',
                'Required parameter "ambulanceId" was null or undefined when calling getAmbulanceSummary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ambulances/{ambulanceId}/summary`.replace(`{${"ambulanceId"}}`, encodeURIComponent(String(requestParameters['ambulanceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAmbulanceSummary200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the total sum of procedure costs for a specific ambulance.
     * Get summary of procedure costs for an ambulance
     */
    async getAmbulanceSummary(requestParameters: GetAmbulanceSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAmbulanceSummary200Response> {
        const response = await this.getAmbulanceSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all ambulances with details such as name, location, and driver\'s name.
     * Get list of ambulances
     */
    async getAmbulancesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Ambulance>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ambulances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AmbulanceFromJSON));
    }

    /**
     * Retrieve a list of all ambulances with details such as name, location, and driver\'s name.
     * Get list of ambulances
     */
    async getAmbulances(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Ambulance>> {
        const response = await this.getAmbulancesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update information of an existing ambulance.
     * Update ambulance details
     */
    async updateAmbulanceRaw(requestParameters: UpdateAmbulanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ambulance>> {
        if (requestParameters['ambulanceId'] == null) {
            throw new runtime.RequiredError(
                'ambulanceId',
                'Required parameter "ambulanceId" was null or undefined when calling updateAmbulance().'
            );
        }

        if (requestParameters['ambulance'] == null) {
            throw new runtime.RequiredError(
                'ambulance',
                'Required parameter "ambulance" was null or undefined when calling updateAmbulance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ambulances/{ambulanceId}`.replace(`{${"ambulanceId"}}`, encodeURIComponent(String(requestParameters['ambulanceId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AmbulanceToJSON(requestParameters['ambulance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AmbulanceFromJSON(jsonValue));
    }

    /**
     * Update information of an existing ambulance.
     * Update ambulance details
     */
    async updateAmbulance(requestParameters: UpdateAmbulanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ambulance> {
        const response = await this.updateAmbulanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
