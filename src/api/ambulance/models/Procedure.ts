/* tslint:disable */
/* eslint-disable */
/**
 * Hospital Management API
 * API for managing hospital ambulances, procedures, and payments.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xkokavecs@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// @ts-ignore
import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface Procedure
 */
export interface Procedure {
    /**
     * Unique identifier of the procedure.
     * @type {string}
     * @memberof Procedure
     */
    id: string;
    /**
     * Name or identifier of the patient.
     * @type {string}
     * @memberof Procedure
     */
    patient: string;
    /**
     * Type of visit.
     * @type {string}
     * @memberof Procedure
     */
    visitType: string;
    /**
     * Price of the procedure.
     * @type {number}
     * @memberof Procedure
     */
    price: number;
    /**
     * Payer for the procedure.
     * @type {string}
     * @memberof Procedure
     */
    payer: string;
    /**
     * Identifier of the ambulance associated with the procedure.
     * @type {string}
     * @memberof Procedure
     */
    ambulanceId: string;
}

/**
 * Check if a given object implements the Procedure interface.
 */
export function instanceOfProcedure(value: object): value is Procedure {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('patient' in value) || value['patient'] === undefined) return false;
    if (!('visitType' in value) || value['visitType'] === undefined) return false;
    if (!('price' in value) || value['price'] === undefined) return false;
    if (!('payer' in value) || value['payer'] === undefined) return false;
    if (!('ambulanceId' in value) || value['ambulanceId'] === undefined) return false;
    return true;
}

export function ProcedureFromJSON(json: any): Procedure {
    return ProcedureFromJSONTyped(json, false);
}

// @ts-ignore
export function ProcedureFromJSONTyped(json: any, ignoreDiscriminator: boolean): Procedure {
    if (json == null) {
        return json;
    }
    return {

        'id': json['id'],
        'patient': json['patient'],
        'visitType': json['visitType'],
        'price': json['price'],
        'payer': json['payer'],
        'ambulanceId': json['ambulanceId'],
    };
}

export function ProcedureToJSON(json: any): Procedure {
    return ProcedureToJSONTyped(json, false);
}

// @ts-ignore
export function ProcedureToJSONTyped(value?: Procedure | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {

        'id': value['id'],
        'patient': value['patient'],
        'visitType': value['visitType'],
        'price': value['price'],
        'payer': value['payer'],
        'ambulanceId': value['ambulanceId'],
    };
}

