/* tslint:disable */
/* eslint-disable */
/**
 * Hospital Management API
 * API for managing hospital ambulances, procedures, and payments.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xkokavecs@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Payment,
} from '../models/index';
import {
    PaymentFromJSON,
    PaymentToJSON,
} from '../models/index';

export interface CreatePaymentRequest {
    payment: Payment;
}

export interface DeletePaymentRequest {
    paymentId: string;
}

export interface GetPaymentByIdRequest {
    paymentId: string;
}

export interface UpdatePaymentRequest {
    paymentId: string;
    payment: Payment;
}

/**
 * PaymentManagementApi - interface
 *
 * @export
 * @interface PaymentManagementApiInterface
 */
export interface PaymentManagementApiInterface {
    /**
     * Create a new payment record for a procedure.
     * @summary Create a new payment record
     * @param {Payment} payment Payment record to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentManagementApiInterface
     */
    createPaymentRaw(requestParameters: CreatePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payment>>;

    /**
     * Create a new payment record for a procedure.
     * Create a new payment record
     */
    createPayment(requestParameters: CreatePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payment>;

    /**
     * Delete a payment record.
     * @summary Delete a payment record
     * @param {string} paymentId Unique identifier of the payment record.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentManagementApiInterface
     */
    deletePaymentRaw(requestParameters: DeletePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a payment record.
     * Delete a payment record
     */
    deletePayment(requestParameters: DeletePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieve details of a specific payment record.
     * @summary Get payment record details
     * @param {string} paymentId Unique identifier of the payment record.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentManagementApiInterface
     */
    getPaymentByIdRaw(requestParameters: GetPaymentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payment>>;

    /**
     * Retrieve details of a specific payment record.
     * Get payment record details
     */
    getPaymentById(requestParameters: GetPaymentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payment>;

    /**
     * Retrieve a list of all payment records for procedures.
     * @summary Get list of payment records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentManagementApiInterface
     */
    getPaymentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Payment>>>;

    /**
     * Retrieve a list of all payment records for procedures.
     * Get list of payment records
     */
    getPayments(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Payment>>;

    /**
     * Update an existing payment record.
     * @summary Update payment record details
     * @param {string} paymentId Unique identifier of the payment record.
     * @param {Payment} payment Payment record object with updated information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentManagementApiInterface
     */
    updatePaymentRaw(requestParameters: UpdatePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payment>>;

    /**
     * Update an existing payment record.
     * Update payment record details
     */
    updatePayment(requestParameters: UpdatePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payment>;

}

/**
 *
 */
export class PaymentManagementApi extends runtime.BaseAPI implements PaymentManagementApiInterface {

    /**
     * Create a new payment record for a procedure.
     * Create a new payment record
     */
    async createPaymentRaw(requestParameters: CreatePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payment>> {
        if (requestParameters['payment'] == null) {
            throw new runtime.RequiredError(
                'payment',
                'Required parameter "payment" was null or undefined when calling createPayment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/payments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentToJSON(requestParameters['payment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentFromJSON(jsonValue));
    }

    /**
     * Create a new payment record for a procedure.
     * Create a new payment record
     */
    async createPayment(requestParameters: CreatePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payment> {
        const response = await this.createPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a payment record.
     * Delete a payment record
     */
    async deletePaymentRaw(requestParameters: DeletePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['paymentId'] == null) {
            throw new runtime.RequiredError(
                'paymentId',
                'Required parameter "paymentId" was null or undefined when calling deletePayment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payments/{paymentId}`.replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters['paymentId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a payment record.
     * Delete a payment record
     */
    async deletePayment(requestParameters: DeletePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePaymentRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve details of a specific payment record.
     * Get payment record details
     */
    async getPaymentByIdRaw(requestParameters: GetPaymentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payment>> {
        if (requestParameters['paymentId'] == null) {
            throw new runtime.RequiredError(
                'paymentId',
                'Required parameter "paymentId" was null or undefined when calling getPaymentById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payments/{paymentId}`.replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters['paymentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentFromJSON(jsonValue));
    }

    /**
     * Retrieve details of a specific payment record.
     * Get payment record details
     */
    async getPaymentById(requestParameters: GetPaymentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payment> {
        const response = await this.getPaymentByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all payment records for procedures.
     * Get list of payment records
     */
    async getPaymentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Payment>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PaymentFromJSON));
    }

    /**
     * Retrieve a list of all payment records for procedures.
     * Get list of payment records
     */
    async getPayments(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Payment>> {
        const response = await this.getPaymentsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update an existing payment record.
     * Update payment record details
     */
    async updatePaymentRaw(requestParameters: UpdatePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payment>> {
        if (requestParameters['paymentId'] == null) {
            throw new runtime.RequiredError(
                'paymentId',
                'Required parameter "paymentId" was null or undefined when calling updatePayment().'
            );
        }

        if (requestParameters['payment'] == null) {
            throw new runtime.RequiredError(
                'payment',
                'Required parameter "payment" was null or undefined when calling updatePayment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/payments/{paymentId}`.replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters['paymentId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentToJSON(requestParameters['payment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentFromJSON(jsonValue));
    }

    /**
     * Update an existing payment record.
     * Update payment record details
     */
    async updatePayment(requestParameters: UpdatePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payment> {
        const response = await this.updatePaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
