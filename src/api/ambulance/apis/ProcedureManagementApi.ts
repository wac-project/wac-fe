/* tslint:disable */
/* eslint-disable */
/**
 * Hospital Management API
 * API for managing hospital ambulances, procedures, and payments.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xkokavecs@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Procedure,
} from '../models/index';
import {
    ProcedureFromJSON,
    ProcedureToJSON,
} from '../models/index';

export interface CreateProcedureRequest {
    procedure: Procedure;
}

export interface DeleteProcedureRequest {
    procedureId: string;
}

export interface GetProcedureByIdRequest {
    procedureId: string;
}

export interface UpdateProcedureRequest {
    procedureId: string;
    procedure: Procedure;
}

/**
 * ProcedureManagementApi - interface
 *
 * @export
 * @interface ProcedureManagementApiInterface
 */
export interface ProcedureManagementApiInterface {
    /**
     * Create a new procedure. An ambulance must be selected from the existing ambulances.
     * @summary Create a new procedure
     * @param {Procedure} procedure Procedure object to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcedureManagementApiInterface
     */
    createProcedureRaw(requestParameters: CreateProcedureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Procedure>>;

    /**
     * Create a new procedure. An ambulance must be selected from the existing ambulances.
     * Create a new procedure
     */
    createProcedure(requestParameters: CreateProcedureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Procedure>;

    /**
     * Delete a procedure.
     * @summary Delete a procedure
     * @param {string} procedureId Unique identifier of the procedure.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcedureManagementApiInterface
     */
    deleteProcedureRaw(requestParameters: DeleteProcedureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a procedure.
     * Delete a procedure
     */
    deleteProcedure(requestParameters: DeleteProcedureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieve details of a specific procedure.
     * @summary Get procedure details
     * @param {string} procedureId Unique identifier of the procedure.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcedureManagementApiInterface
     */
    getProcedureByIdRaw(requestParameters: GetProcedureByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Procedure>>;

    /**
     * Retrieve details of a specific procedure.
     * Get procedure details
     */
    getProcedureById(requestParameters: GetProcedureByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Procedure>;

    /**
     * Retrieve a list of all procedures with details including patient, visit type, price, payer, and associated ambulance.
     * @summary Get list of procedures
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcedureManagementApiInterface
     */
    getProceduresRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Procedure>>>;

    /**
     * Retrieve a list of all procedures with details including patient, visit type, price, payer, and associated ambulance.
     * Get list of procedures
     */
    getProcedures(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Procedure>>;

    /**
     * Update an existing procedure.
     * @summary Update procedure details
     * @param {string} procedureId Unique identifier of the procedure.
     * @param {Procedure} procedure Procedure object with updated information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcedureManagementApiInterface
     */
    updateProcedureRaw(requestParameters: UpdateProcedureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Procedure>>;

    /**
     * Update an existing procedure.
     * Update procedure details
     */
    updateProcedure(requestParameters: UpdateProcedureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Procedure>;

}

/**
 *
 */
export class ProcedureManagementApi extends runtime.BaseAPI implements ProcedureManagementApiInterface {

    /**
     * Create a new procedure. An ambulance must be selected from the existing ambulances.
     * Create a new procedure
     */
    async createProcedureRaw(requestParameters: CreateProcedureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Procedure>> {
        if (requestParameters['procedure'] == null) {
            throw new runtime.RequiredError(
                'procedure',
                'Required parameter "procedure" was null or undefined when calling createProcedure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/procedures`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcedureToJSON(requestParameters['procedure']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcedureFromJSON(jsonValue));
    }

    /**
     * Create a new procedure. An ambulance must be selected from the existing ambulances.
     * Create a new procedure
     */
    async createProcedure(requestParameters: CreateProcedureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Procedure> {
        const response = await this.createProcedureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a procedure.
     * Delete a procedure
     */
    async deleteProcedureRaw(requestParameters: DeleteProcedureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['procedureId'] == null) {
            throw new runtime.RequiredError(
                'procedureId',
                'Required parameter "procedureId" was null or undefined when calling deleteProcedure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/procedures/{procedureId}`.replace(`{${"procedureId"}}`, encodeURIComponent(String(requestParameters['procedureId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a procedure.
     * Delete a procedure
     */
    async deleteProcedure(requestParameters: DeleteProcedureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProcedureRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve details of a specific procedure.
     * Get procedure details
     */
    async getProcedureByIdRaw(requestParameters: GetProcedureByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Procedure>> {
        if (requestParameters['procedureId'] == null) {
            throw new runtime.RequiredError(
                'procedureId',
                'Required parameter "procedureId" was null or undefined when calling getProcedureById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/procedures/{procedureId}`.replace(`{${"procedureId"}}`, encodeURIComponent(String(requestParameters['procedureId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcedureFromJSON(jsonValue));
    }

    /**
     * Retrieve details of a specific procedure.
     * Get procedure details
     */
    async getProcedureById(requestParameters: GetProcedureByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Procedure> {
        const response = await this.getProcedureByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all procedures with details including patient, visit type, price, payer, and associated ambulance.
     * Get list of procedures
     */
    async getProceduresRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Procedure>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/procedures`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProcedureFromJSON));
    }

    /**
     * Retrieve a list of all procedures with details including patient, visit type, price, payer, and associated ambulance.
     * Get list of procedures
     */
    async getProcedures(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Procedure>> {
        const response = await this.getProceduresRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update an existing procedure.
     * Update procedure details
     */
    async updateProcedureRaw(requestParameters: UpdateProcedureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Procedure>> {
        if (requestParameters['procedureId'] == null) {
            throw new runtime.RequiredError(
                'procedureId',
                'Required parameter "procedureId" was null or undefined when calling updateProcedure().'
            );
        }

        if (requestParameters['procedure'] == null) {
            throw new runtime.RequiredError(
                'procedure',
                'Required parameter "procedure" was null or undefined when calling updateProcedure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/procedures/{procedureId}`.replace(`{${"procedureId"}}`, encodeURIComponent(String(requestParameters['procedureId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProcedureToJSON(requestParameters['procedure']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcedureFromJSON(jsonValue));
    }

    /**
     * Update an existing procedure.
     * Update procedure details
     */
    async updateProcedure(requestParameters: UpdateProcedureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Procedure> {
        const response = await this.updateProcedureRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
